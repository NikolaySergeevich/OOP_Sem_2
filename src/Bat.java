/**
 * Класс "Летучая мышь" наслед. от Predator (хищники). В хищниках мы указывали, что они кушают мясо,
 * но для летуч. мыш. это немного не правильно и тут мы переопределяем этот метод feed ().
 * Дальше мы переопределяем метод String speak(). Вспомним, что в классе Animal мы имплементировали
 * интерфес Speakable, а т.к. класс Bat является глубоким наследником Animal - значит метод  speak(),
 * который описан в Speakable обязателен для класса Bat.
 * Т.к. при создании этого класса мы указали implements Flyable, то это означает, что метод flySpeed(),
 * который указан в интерфейсе Flyable, обязателен к реализыции в этом классе Bat. Зачем делать интерфейс
 * Flyable, если можно просто написать такой же метод flySpeed() метод внутри класса Bat. А вот зачем.
 * Все классы, которые находятся внутри нашего проекта и которые будут помечены интерфесом Flyable, смогут
 * скомпановаться в отдельный лист например и там, например отсоритироваться по методу flySpeed().
 * Можно будет не только скорость животных сравнить, если бы Flyable небыло, а теперь можно сравнить
 * скоро летучей мыши и самалёта например, если создать такой класс с пометкой implements Flyable и указать
 * его скорость.
 */
public class Bat extends Predator implements Flyable{
    public Bat(String name) {
        super(name);
    }

    @Override
    public String feed (){
        return "Насекомые";
    }
    @Override
    public String speak() {
        return "Sssss";
    }

    @Override
    public int flySpeed() {
        return 70;
    }
}
